/**\n * Authority Hook Service Integration - JavaScript\n * \n * Handles client-side integration with the centralized MKCG_Authority_Hook_Service\n * Provides unified functionality across all generators\n * \n * @package Media_Kit_Content_Generator\n * @version 2.0\n */\n\n(function() {\n    'use strict';\n    \n    // Authority Hook Service Manager\n    window.AuthorityHookServiceManager = {\n        \n        // Service configuration\n        config: {\n            ajaxUrl: window.ajaxurl || '/wp-admin/admin-ajax.php',\n            nonce: window.mkcg_vars?.nonce || '',\n            endpoints: {\n                save: 'mkcg_save_authority_hook',\n                get: 'mkcg_get_authority_hook',\n                validate: 'mkcg_validate_authority_hook'\n            },\n            fieldPrefix: 'mkcg-',\n            autoSaveDelay: 1000 // Auto-save delay in milliseconds\n        },\n        \n        // Internal state\n        state: {\n            currentPostId: 0,\n            autoSaveTimeout: null,\n            isInitialized: false,\n            instances: {} // Track multiple instances on same page\n        },\n        \n        /**\n         * Initialize the service manager\n         */\n        init: function(postId = 0) {\n            console.log('üöÄ Authority Hook Service Manager: Initializing');\n            \n            this.state.currentPostId = postId;\n            this.state.isInitialized = true;\n            \n            // Set up global event listeners\n            this.bindGlobalEvents();\n            \n            // Auto-detect and initialize all Authority Hook instances\n            this.initializeInstances();\n            \n            console.log('‚úÖ Authority Hook Service Manager: Initialized with post ID:', postId);\n        },\n        \n        /**\n         * Auto-detect and initialize Authority Hook instances\n         */\n        initializeInstances: function() {\n            const instances = document.querySelectorAll('[data-generator]');\n            \n            instances.forEach((instance, index) => {\n                const generatorType = instance.dataset.generator;\n                const instanceId = `${generatorType}_${index}`;\n                \n                this.state.instances[instanceId] = {\n                    element: instance,\n                    generatorType: generatorType,\n                    fields: this.findFields(instance),\n                    initialized: false\n                };\n                \n                this.initializeInstance(instanceId);\n            });\n        },\n        \n        /**\n         * Initialize a specific Authority Hook instance\n         */\n        initializeInstance: function(instanceId) {\n            const instance = this.state.instances[instanceId];\n            if (!instance || instance.initialized) return;\n            \n            console.log(`üîß Initializing Authority Hook instance: ${instanceId}`);\n            \n            // Bind field events\n            Object.values(instance.fields).forEach(field => {\n                if (field) {\n                    this.bindFieldEvents(field, instanceId);\n                }\n            });\n            \n            // Bind UI events\n            this.bindUIEvents(instance.element, instanceId);\n            \n            // Load existing data\n            this.loadData(instanceId);\n            \n            instance.initialized = true;\n            console.log(`‚úÖ Authority Hook instance initialized: ${instanceId}`);\n        },\n        \n        /**\n         * Find Authority Hook fields within an instance\n         */\n        findFields: function(container) {\n            const prefix = this.config.fieldPrefix;\n            return {\n                who: container.querySelector(`#${prefix}who`),\n                result: container.querySelector(`#${prefix}result`),\n                when: container.querySelector(`#${prefix}when`),\n                how: container.querySelector(`#${prefix}how`),\n                complete: container.querySelector(`#${prefix}authority-hook`)\n            };\n        },\n        \n        /**\n         * Bind field-level events\n         */\n        bindFieldEvents: function(field, instanceId) {\n            if (!field) return;\n            \n            // Auto-save on change\n            field.addEventListener('change', () => {\n                this.scheduleAutoSave(instanceId);\n            });\n            \n            // Real-time updates on input\n            field.addEventListener('input', () => {\n                this.updateCompleteHook(instanceId);\n                this.scheduleAutoSave(instanceId);\n            });\n            \n            // Clear button functionality\n            const clearBtn = field.parentElement.querySelector('.field__clear');\n            if (clearBtn) {\n                clearBtn.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    field.value = '';\n                    this.updateCompleteHook(instanceId);\n                    this.scheduleAutoSave(instanceId);\n                });\n            }\n        },\n        \n        /**\n         * Bind UI-level events\n         */\n        bindUIEvents: function(container, instanceId) {\n            // Tab switching\n            const tabs = container.querySelectorAll('.tabs__input');\n            tabs.forEach(tab => {\n                tab.addEventListener('change', () => {\n                    console.log(`üìë Tab switched in ${instanceId}:`, tab.id);\n                });\n            });\n            \n            // Example chip clicks\n            const examples = container.querySelectorAll('.tag--example, .example-chip');\n            examples.forEach(example => {\n                example.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const target = example.dataset.target;\n                    const value = example.dataset.value;\n                    \n                    const field = document.getElementById(target);\n                    if (field) {\n                        field.value = value;\n                        this.updateCompleteHook(instanceId);\n                        this.scheduleAutoSave(instanceId);\n                    }\n                });\n            });\n            \n            // Copy button functionality (if preview enabled)\n            const copyBtn = container.querySelector('[id*=\"copy-authority-hook-btn\"]');\n            if (copyBtn) {\n                copyBtn.addEventListener('click', () => {\n                    this.copyToClipboard(instanceId);\n                });\n            }\n        },\n        \n        /**\n         * Bind global events\n         */\n        bindGlobalEvents: function() {\n            // Listen for external updates\n            document.addEventListener('authority-hook-updated', (e) => {\n                if (e.detail.instanceId) {\n                    this.updateCompleteHook(e.detail.instanceId);\n                }\n            });\n            \n            // Auto-save before page unload\n            window.addEventListener('beforeunload', () => {\n                this.saveAllInstances();\n            });\n        },\n        \n        /**\n         * Update complete Authority Hook text for an instance\n         */\n        updateCompleteHook: function(instanceId) {\n            const instance = this.state.instances[instanceId];\n            if (!instance) return;\n            \n            const fields = instance.fields;\n            const who = fields.who?.value || 'your audience';\n            const result = fields.result?.value || 'achieve their goals';\n            const when = fields.when?.value || 'they need help';\n            const how = fields.how?.value || 'through your method';\n            \n            const completeHook = `I help ${who} ${result} when ${when} ${how}.`;\n            \n            // Update hidden field\n            if (fields.complete) {\n                fields.complete.value = completeHook;\n            }\n            \n            // Update any preview elements\n            const previewElements = instance.element.querySelectorAll('.authority-hook__content, [id*=\"authority-hook-content\"]');\n            previewElements.forEach(preview => {\n                preview.innerHTML = `I help <span class=\"authority-hook__highlight\">${who}</span> \n                    <span class=\"authority-hook__highlight\">${result}</span> when \n                    <span class=\"authority-hook__highlight\">${when}</span> \n                    <span class=\"authority-hook__highlight\">${how}</span>.`;\n            });\n            \n            console.log(`üîÑ Updated complete hook for ${instanceId}:`, completeHook);\n        },\n        \n        /**\n         * Schedule auto-save with debouncing\n         */\n        scheduleAutoSave: function(instanceId) {\n            clearTimeout(this.state.autoSaveTimeout);\n            \n            this.state.autoSaveTimeout = setTimeout(() => {\n                this.saveData(instanceId);\n            }, this.config.autoSaveDelay);\n        },\n        \n        /**\n         * Load Authority Hook data from server\n         */\n        loadData: function(instanceId, source = 'auto') {\n            if (!this.state.currentPostId) {\n                console.log('‚ö†Ô∏è No post ID available for loading data');\n                return;\n            }\n            \n            console.log(`üì• Loading Authority Hook data for ${instanceId}`);\n            \n            const params = new URLSearchParams({\n                action: this.config.endpoints.get,\n                post_id: this.state.currentPostId,\n                source: source,\n                nonce: this.config.nonce\n            });\n            \n            fetch(`${this.config.ajaxUrl}?${params}`, {\n                method: 'GET'\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    this.populateFields(instanceId, data.data.components);\n                    console.log(`‚úÖ Data loaded for ${instanceId}:`, data.data);\n                } else {\n                    console.warn(`‚ö†Ô∏è Failed to load data for ${instanceId}:`, data.data);\n                }\n            })\n            .catch(error => {\n                console.error(`‚ùå Error loading data for ${instanceId}:`, error);\n            });\n        },\n        \n        /**\n         * Save Authority Hook data to server\n         */\n        saveData: function(instanceId, destinations = ['pods', 'postmeta']) {\n            if (!this.state.currentPostId) {\n                console.log('‚ö†Ô∏è No post ID available for saving data');\n                return Promise.reject('No post ID');\n            }\n            \n            const instance = this.state.instances[instanceId];\n            if (!instance) {\n                return Promise.reject('Instance not found');\n            }\n            \n            const fields = instance.fields;\n            const components = {\n                who: fields.who?.value || 'your audience',\n                what: fields.result?.value || 'achieve their goals',\n                when: fields.when?.value || 'they need help',\n                how: fields.how?.value || 'through your method'\n            };\n            \n            console.log(`üíæ Saving Authority Hook data for ${instanceId}:`, components);\n            \n            const formData = new FormData();\n            formData.append('action', this.config.endpoints.save);\n            formData.append('post_id', this.state.currentPostId);\n            formData.append('nonce', this.config.nonce);\n            formData.append('who', components.who);\n            formData.append('what', components.what);\n            formData.append('when', components.when);\n            formData.append('how', components.how);\n            formData.append('destinations', JSON.stringify(destinations));\n            \n            return fetch(this.config.ajaxUrl, {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    console.log(`‚úÖ Data saved for ${instanceId}:`, data.data);\n                    this.showFeedback(instanceId, 'Save successful', 'success');\n                    return data.data;\n                } else {\n                    console.error(`‚ùå Save failed for ${instanceId}:`, data.data);\n                    this.showFeedback(instanceId, 'Save failed: ' + data.data.message, 'error');\n                    throw new Error(data.data.message);\n                }\n            })\n            .catch(error => {\n                console.error(`‚ùå Save error for ${instanceId}:`, error);\n                this.showFeedback(instanceId, 'Network error during save', 'error');\n                throw error;\n            });\n        },\n        \n        /**\n         * Validate Authority Hook data\n         */\n        validateData: function(instanceId) {\n            const instance = this.state.instances[instanceId];\n            if (!instance) return Promise.reject('Instance not found');\n            \n            const fields = instance.fields;\n            const components = {\n                who: fields.who?.value || 'your audience',\n                what: fields.result?.value || 'achieve their goals',\n                when: fields.when?.value || 'they need help',\n                how: fields.how?.value || 'through your method'\n            };\n            \n            const formData = new FormData();\n            formData.append('action', this.config.endpoints.validate);\n            formData.append('nonce', this.config.nonce);\n            formData.append('who', components.who);\n            formData.append('what', components.what);\n            formData.append('when', components.when);\n            formData.append('how', components.how);\n            \n            return fetch(this.config.ajaxUrl, {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    console.log(`‚úÖ Validation complete for ${instanceId}:`, data.data);\n                    return data.data;\n                } else {\n                    throw new Error(data.data.message);\n                }\n            });\n        },\n        \n        /**\n         * Populate fields with data\n         */\n        populateFields: function(instanceId, components) {\n            const instance = this.state.instances[instanceId];\n            if (!instance) return;\n            \n            const fields = instance.fields;\n            \n            if (fields.who && components.who) fields.who.value = components.who;\n            if (fields.result && components.what) fields.result.value = components.what;\n            if (fields.when && components.when) fields.when.value = components.when;\n            if (fields.how && components.how) fields.how.value = components.how;\n            \n            this.updateCompleteHook(instanceId);\n        },\n        \n        /**\n         * Copy Authority Hook to clipboard\n         */\n        copyToClipboard: function(instanceId) {\n            const instance = this.state.instances[instanceId];\n            if (!instance || !instance.fields.complete) return;\n            \n            const text = instance.fields.complete.value;\n            \n            if (navigator.clipboard) {\n                navigator.clipboard.writeText(text).then(() => {\n                    this.showFeedback(instanceId, 'Copied to clipboard!', 'success');\n                }).catch(() => {\n                    this.fallbackCopyToClipboard(text, instanceId);\n                });\n            } else {\n                this.fallbackCopyToClipboard(text, instanceId);\n            }\n        },\n        \n        /**\n         * Fallback copy method\n         */\n        fallbackCopyToClipboard: function(text, instanceId) {\n            const textArea = document.createElement('textarea');\n            textArea.value = text;\n            document.body.appendChild(textArea);\n            textArea.focus();\n            textArea.select();\n            \n            try {\n                document.execCommand('copy');\n                this.showFeedback(instanceId, 'Copied to clipboard!', 'success');\n            } catch (err) {\n                this.showFeedback(instanceId, 'Unable to copy to clipboard', 'error');\n            }\n            \n            document.body.removeChild(textArea);\n        },\n        \n        /**\n         * Show user feedback\n         */\n        showFeedback: function(instanceId, message, type = 'info') {\n            // Try to use existing notification system\n            if (window.SimpleNotifications) {\n                window.SimpleNotifications.show(message, type);\n                return;\n            }\n            \n            // Fallback to console\n            console.log(`üì¢ ${instanceId}: ${message}`);\n        },\n        \n        /**\n         * Save all instances\n         */\n        saveAllInstances: function() {\n            Object.keys(this.state.instances).forEach(instanceId => {\n                this.saveData(instanceId).catch(() => {\n                    // Silent fail on page unload\n                });\n            });\n        },\n        \n        /**\n         * Get instance data\n         */\n        getInstanceData: function(instanceId) {\n            const instance = this.state.instances[instanceId];\n            if (!instance) return null;\n            \n            const fields = instance.fields;\n            return {\n                who: fields.who?.value || 'your audience',\n                what: fields.result?.value || 'achieve their goals',\n                when: fields.when?.value || 'they need help',\n                how: fields.how?.value || 'through your method',\n                complete: fields.complete?.value || ''\n            };\n        },\n        \n        /**\n         * Public API methods\n         */\n        api: {\n            save: function(instanceId, destinations) {\n                return window.AuthorityHookServiceManager.saveData(instanceId, destinations);\n            },\n            \n            load: function(instanceId, source) {\n                return window.AuthorityHookServiceManager.loadData(instanceId, source);\n            },\n            \n            validate: function(instanceId) {\n                return window.AuthorityHookServiceManager.validateData(instanceId);\n            },\n            \n            getData: function(instanceId) {\n                return window.AuthorityHookServiceManager.getInstanceData(instanceId);\n            }\n        }\n    };\n    \n    // Auto-initialize when DOM is ready\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => {\n            // Get post ID from various sources\n            let postId = 0;\n            \n            // Try to get from Topics Generator\n            const topicsPostIdField = document.getElementById('topics-generator-post-id');\n            if (topicsPostIdField) {\n                postId = parseInt(topicsPostIdField.value) || 0;\n            }\n            \n            // Try to get from global data\n            if (!postId && window.MKCG_Topics_Data) {\n                postId = window.MKCG_Topics_Data.postId || 0;\n            }\n            \n            window.AuthorityHookServiceManager.init(postId);\n        });\n    } else {\n        // DOM already ready\n        setTimeout(() => {\n            let postId = 0;\n            const topicsPostIdField = document.getElementById('topics-generator-post-id');\n            if (topicsPostIdField) {\n                postId = parseInt(topicsPostIdField.value) || 0;\n            }\n            window.AuthorityHookServiceManager.init(postId);\n        }, 100);\n    }\n    \n})();\n\n// Make API available globally\nwindow.AuthorityHookAPI = window.AuthorityHookServiceManager?.api;\n\nconsole.log('‚úÖ Authority Hook Service Integration loaded');\n